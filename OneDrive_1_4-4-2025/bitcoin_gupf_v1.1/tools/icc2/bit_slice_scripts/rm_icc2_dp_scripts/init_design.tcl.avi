##########################################################################################
# Tool: IC Compiler II
# Script: init_design.tcl
# Version: L-2016.03 (April 4, 2016)
# Copyright (C) 2014-2016 Synopsys, Inc. All rights reserved.
##########################################################################################

   source -echo ./rm_setup/icc2_dp_setup.tcl 

####################################
# Create and read the design	
####################################
if {[file exists ${WORK_DIR_INIT_DESIGN}/$DESIGN_LIBRARY]} {
   file delete -force ${WORK_DIR_INIT_DESIGN}/${DESIGN_LIBRARY}
}

# NOTE: The library will not appear on disk until you save
set create_lib_cmd "create_lib ${WORK_DIR_INIT_DESIGN}/$DESIGN_LIBRARY"
if {[file exists [which $TECH_FILE]]} {
   lappend create_lib_cmd -tech $TECH_FILE ;# recommended
} elseif {$TECH_LIB != ""} {
   lappend create_lib_cmd -use_technology_lib $TECH_LIB ;# optional
}
lappend create_lib_cmd -ref_libs $REFERENCE_LIBRARY
puts "RM-info : $create_lib_cmd"
eval $create_lib_cmd




if {$DP_FLOW == "hier"} {
   # Read in the DESIGN_NAME outline.  This will create the outline 
   puts "RM-info : Reading verilog outline (${VERILOG_NETLIST_FILES})"
   #read_verilog_outline -top ${DESIGN_NAME} ${VERILOG_NETLIST_FILES}
   read_verilog -top ${DESIGN_NAME} ${VERILOG_NETLIST_FILES}
} else {
   # Read in the full DESIGN_NAME.  This will create the DESIGN_NAME view in the database
   puts "RM-info : Reading full chip verilog (${VERILOG_NETLIST_FILES})"
   read_verilog -top ${DESIGN_NAME} ${VERILOG_NETLIST_FILES}
}

####################################################
# Here we use add ICC2 only tech information.
# ICC2 needs to have the routing direction specified, 
# track offset, and default site defs.
####################################################

## Technology setup for routing layer direction, offset, site default, and site symmetry.
#  If TECH_FILE is specified, they should be properly set.
#  If TECH_LIB is used and it does not contain such information, then they should be set here as well.
if {$TECH_FILE != "" || ($TECH_LIB != "" && !$TECH_LIB_INCLUDES_TECH_SETUP_INFO)} {
   if {[file exists [which $TCL_TECH_SETUP_FILE]]} {
      puts "RM-info : Sourcing [which $TCL_TECH_SETUP_FILE]"
      source -echo $TCL_TECH_SETUP_FILE
   } elseif {$TCL_TECH_SETUP_FILE != ""} {
      puts "RM-error : TCL_TECH_SETUP_FILE($TCL_TECH_SETUP_FILE) is invalid. Please correct it."
   }
}

# Read TLU+
if {[file exists [which $TLU_PLUS_FILE]]} {
   puts "RM-info : Sourcing [which $TLU_PLUS_FILE]"
   source -echo $TLU_PLUS_FILE
} else {
   puts "RM-info : No TLU plus files sourced, Parasitic library containing TLU+ must be included in library reference list"
}

# Define the ignored layers (if specified)
if {$MIN_ROUTING_LAYER != ""} {
   set_ignored_layers -min_routing_layer $MIN_ROUTING_LAYER
}
if {$MAX_ROUTING_LAYER != ""} {
   set_ignored_layers -max_routing_layer $MAX_ROUTING_LAYER
}

####################################
# Floorplanning
####################################
source scripts/direction.tcl

 if {[file exists $UPF_FILE]} {
      load_upf $UPF_FILE
   }
commit_upf
initialize_floorplan -side_length { 5500 1500 } -core_offset 50

create_keepout_margin -type hard_macro -outer {5 5 5 5} [get_cells * -hierarchical -filter "design_type==macro"]
remove_placement_blockages -all

save_lib -as bit_coin_before_abstract.nlib

commit_block {bit_top bit_slice}
set_app_options -name abstract.allow_all_level_abstract -value true
create_abstract -placement -all_blocks

##########USE BELOW APP OPTION OTHERWISE TOOL COMPLAINS THERE ARE TO MANY RIGID BLOCKS ##########
set_app_options -name plan.shaping.enable_rigid_block_percentage_check -value false
################################################################################################

########### ARRANGE THE  "bit_secure*" at TOP and the 32 "bit_slice*" in each "bit_secure" in an array form ###########
########## MUST USE the "cons_shaping.tcl" FILE. TOOL WONT COME UP WITH THIS FLOORPLAN by DEFAULT################# 
         #########Still an issue ########
         ########Below shape_blocks is placing the bit_slice in bit_scure too far from the left edge ########
         ########As a result when the snap_cells_to_block_grid command is run inside of bit_secure , ########
         ####### the bit slices overlap on one of the grids and the grid closest to left boundary edge is empty  #########

shape_blocks -channels false -constraint_file ./scripts/cons_shaping.tcl
save_block -as post_shaping 

####Even though the 16 "bit_secure" are arranged in array using above , they are not aligned  ########
##### Create grid at the TOP so that all the  16 "bit_secure" are aligned and also accounted for the channel between them ########

create_grid align_bit_secure -type block -x_offset 70 -y_offset 70 -x_step  1370 -y_step 370 -orientations {R0}
##### The orietation switch in above command is not honored. PLS. SEE STAR 9001078084  #############
##### I worked around it by defining the "allowed_orintation " constraint in the "cons_shaping.tcl" ############# 
   
set_snap_setting -enabled true -snap block
set_block_grid_references -grid align_bit_secure -designs bit_top
snap_cells_to_block_grid -grid align_bit_secure -cells [get_cells *bit_secure*]

   
###############################################################################################

save_lib -all
save_lib -as bit_coin_fp.nlib
close_block -force
return

source -e -v scripts/fp.tcl


echo [date] > init_design
